// userchrome.scss

@use "sass:map";

@use "./components/components.mixins.buttons" as mixBtn;
@use "./components/components.mixins.inputs" as mixInput;
@use "./components/components.mixins.modals" as mixModal;

@use "theme" as thm;
@use "fonts" as fnt;
@use "colors" as clr;
@use "spacing" as sp;
@use "borders" as brd;
@use "./components/components.buttons" as btn;

// Global styles
* {
  font-family: fnt.$font-family !important;
  font-size: fnt.$font-size !important;
}

*::placeholder {
  color: map.get(map.get(clr.$colors, thm.$theme), fg-4) !important;
}

*:focus-visible {
  outline: 3px solid map.get(map.get(clr.$colors, thm.$theme), modal-input-border-color-active) !important;
}

html,
body {
  color: map.get(map.get(clr.$colors, thm.$theme), fg-1) !important;
  font-family: fnt.$font-family !important;
  font-size: fnt.$font-size !important;
  font-weight: fnt.$font-weight !important;
}



// Use all window height when menu bar is disabled
.profile-default {
  height: 100vh !important;
  
  // Set background color for secondary sidebar
  > div:first-of-type {
    background: map.get(map.get(clr.$colors, thm.$theme), secondary-sidebar-bg-color) !important;
    height: 100vh !important;
  }
}

/* ==================
   FONTS
   ================== */

// Icons
[class^="icon-"],
[class*=" icon-"],
[class^=" fa-"],
[class*=" fa-"],
[class^=" fas-"],
[class*=" fas-"],
.emoji-box {
  color: map.get(map.get(clr.$colors, thm.$theme), icon-color) !important;
  font-size: fnt.$icon-size !important;
  font-family: "awesome-adwaita-icons", "icomoon", "Font Awesome 5 Free" !important;
  font-weight: fnt.$font-weight !important;
}

// Set custom unicode for adding tags
.toolbar-button > .icon-tags::before {
  content: "\e907";
}

/* ==================
   BUTTONS
   ================== */

// General button styles
button {
  cursor: default !important;
}

button:not(
    .new-folder-button,
    .toolbar-button,
    .tag-list > button,
    .config-screen button,
    .emoji-picker button,
    .icon-selector-row > button,
    .search-bar > button,
    .sort-order-field-button,
    .sort-order-reverse-button
  ) {
  @include mixBtn.buttonDefault;
}

// Synchronization section
.sidebar > div:last-of-type {
  background: transparent !important;
  margin-bottom: 3px !important;

  // Synchronization button
  button {
    @include mixBtn.buttonDefault;
  }
}

div > .bLqnaV > .UdFVY {
  // Synchronization message
  color: map.get(map.get(clr.$colors, thm.$theme), fg-5) !important;
}

// Toolbar button styles
.button,
.toolbar-button,
.new-folder-button,
span[role="cell"] a:not([style*="text-decoration: underline"]) {
  @include mixBtn.buttonToolbar;
}

// Notebook header button styles
.folder-and-tag-list > .item-list > .sidebar-header-button {
  line-height: .7 !important;
  top: 2px !important;
  right: 2px !important;

  &.-newfolder {
    background: transparent !important;
    padding: unset !important;
    height: unset !important;
  }

  // Hide "collapse all" button
  &.-collapseall {
    display: none;
  }

  i {
    color: map.get(map.get(clr.$colors, thm.$theme), fg-1) !important;
  }

  &:hover {
    background: btn.$btn-bg-4 !important;
    color: map.get(map.get(clr.$colors, thm.$theme), fg-1) !important;
  }
}

// New note and to-do button styles
.new-note-todo-buttons {
  bottom: sp.$spacing-lg !important;
  direction: rtl !important;
  gap: sp.$spacing !important;
  position: absolute !important;
  width: calc(100% - sp.$spacing-lm) !important;
  z-index: 1 !important;

  button.new-note-button,
  button.new-todo-button {
    direction: ltr !important;
    min-width: min-content !important;
  }
}

// Sort order button styles
.search-and-sort > div:nth-of-type(2) {
  border-radius: btn.$btn-radius !important;

  &:hover {
    background: btn.$btn-bg-1 !important;
  }
}

.search-and-sort button.sort-order-field-button,
.search-and-sort button.sort-order-reverse-button {
  background: transparent !important;
  border: none !important;
  border-radius: 0 !important;
  min-height: btn.$btn-size-toolbar !important;
  overflow: hidden !important;

  > span {
    color: map.get(map.get(clr.$colors, thm.$theme), fg-1) !important;
  }

  &:hover {
    background: btn.$btn-bg-4 !important;
  }
}

.search-and-sort button.sort-order-field-button {
  border-top-left-radius: btn.$btn-radius !important;
  border-bottom-left-radius: btn.$btn-radius !important;
  min-width: btn.$btn-size-toolbar + 1px !important; // Compensate separator size
  position: relative !important;

  &::after {
    content: "";
    position: absolute;
    right: 0px;
    height: 86%;
    width: 1px;
    background: btn.$btn-separator !important;
  }
}

.search-and-sort button.sort-order-reverse-button {
  border-top-right-radius: btn.$btn-radius !important;
  border-bottom-right-radius: btn.$btn-radius !important;
  min-width: btn.$btn-size-toolbar !important;
}

/* ===========================
   PRIMARY SIDEBAR (NOTEBOOKS)
   =========================== */

.sidebar {
  background: map.get(map.get(clr.$colors, thm.$theme), primary-sidebar-bg-color) !important;
  border-left: 1px solid map.get(map.get(clr.$colors, thm.$theme), primary-sidebar-border-color) !important;

  > div {
    padding: sp.$spacing-sm !important; // Set general spacing around containers
  }

  // Synchronization message
  .jEepNR, .jUPQRL{
    color: map.get(map.get(clr.$colors, thm.$theme), fg-5) !important;
    opacity: 1 !important;
  }
}

// Notebooks section
.all-notes {
  // Hide "All notes" button
  display: none !important;
}

// Headers ("Notebooks" and "Tags")
.sidebar-list-items-wrapper {
  .sidebar-header-container {
    margin: sp.$spacing-xs sp.$spacing sp.$spacing-lg sp.$spacing !important;

    > div {
      align-items: center !important;
      padding: 0 !important;
    }

    span,
    i {
      color: map.get(map.get(clr.$colors, thm.$theme), fg-1) !important;
      font-weight: fnt.$font-weight !important;
      text-transform: capitalize !important;
    }

    span {
      margin: 0 20px 0 0 !important;
      text-align: center;
      font-weight: fnt.$font-weight-bold !important;
    }

    i {
      margin-right: 0 !important;
    }
  }
}

.sidebar-expand-link.toggle {
  order: 0 !important;
  padding-right: 0 !important;
}

.list-item-wrapper:not(.sidebar-header-container):not(.sidebar-spacer-item) {
  background: transparent !important; // Remove default notebook background
  border-radius: btn.$btn-radius-sm !important;
  height: btn.$btn-size !important;
  padding: 0 sp.$spacing-lg !important;
  margin: 0 0 2px calc(var(--depth)*10px - 20px) !important;
  opacity: 1 !important;

  // Notebook sidebar tag section margin fix
  &[style*="--depth: 1;"] {
    margin: 0 0 2px calc(var(--depth)*10px - 10px) !important;
  }

  .note-count-label {
    color: map.get(map.get(clr.$colors, thm.$theme), fg-5) !important;
  }

  a.list-item {
    color: map.get(map.get(clr.$colors, thm.$theme), fg-1) !important;
    opacity: 1 !important;
    order: -1 !important;
    padding: 0 !important;
  }

  i {
    color: map.get(map.get(clr.$colors, thm.$theme), icon-color) !important;
    opacity: 1 !important;
  }

  &:hover {
    background: btn.$btn-bg-4 !important;

    a,
    i {
      opacity: 1 !important;
    }
  }

  &.-selected {
    background: btn.$btn-bg-4 !important;

    &:hover {
      background: btn.$btn-bg-5 !important;
    }
  }
}

// Tags section
.sidebar-list-items-wrapper .sidebar-spacer-item {
  height: 1px !important;
  background: map.get(map.get(clr.$colors, thm.$theme), primary-sidebar-separator-color) !important;
  margin: sp.$spacing-md 0 !important;
}

/* =========================
   SECONDARY SIDEBAR (NOTES)
   ========================= */

// Set background color for notes sidebar
.profile-default > div:first-of-type {
    background: map.get(map.get(clr.$colors, thm.$theme), secondary-sidebar-bg-color) !important;
}

.cAxSyf, .dKIlJE {
  // Edit spacing and remove background of note controls
  background: transparent !important;
  margin: sp.$spacing-lm sp.$spacing-sm 0 sp.$spacing !important;
  padding: 0 !important;
}

// Notes search bar
.search-bar {
  background: map.get(map.get(clr.$colors, thm.$theme), secondary-sidebar-input-bg-color) !important;
  border: 3px solid map.get(map.get(clr.$colors, thm.$theme), secondary-sidebar-input-bg-color) !important;
  border-radius: btn.$btn-radius !important;
  height: btn.$btn-size-toolbar !important;
  min-width: 120px !important;
  box-sizing: border-box !important;

  div {
    flex-direction: row-reverse !important;

    input {
      @include mixInput.input;
      outline: none !important;
    }

    button {
      border-top-right-radius: 0 !important;
      border-bottom-right-radius: 0 !important;
      position: relative !important;
      min-height: 0 !important;
      min-width: 28px !important;
      background: transparent !important;
      outline: none !important;
      padding: 0 !important;

      span {
        display: block !important;
        color: map.get(map.get(clr.$colors, thm.$theme), icon-color) !important;
      }
    }
  }

  &:focus-within {
    border: 3px solid map.get(map.get(clr.$colors, thm.$theme), secondary-sidebar-input-border-color-active) !important;
  }
}

.notes {
  margin: 0 sp.$spacing 0 0 !important;
}

// Note list
.note-list {
  background: transparent !important; // Remove background of note list
  margin: sp.$spacing-lm sp.$spacing 60px !important;

  .emptylist {
    // Remove background of empty note list message
    background: transparent !important;
    color: map.get(map.get(clr.$colors, thm.$theme), fg-3) !important;
  }
}

.note-list-item-wrapper {
  margin: 0 0 sp.$spacing-xxs 0 !important; // Add spacing between notes in list

  .note-list-item {
    .content {
      background: transparent !important; // Remove default note background
      border: 3px solid transparent !important;
      box-sizing: border-box;
      height: btn.$btn-size-toolbar !important;
      border-radius: btn.$btn-radius-sm !important;
      padding: 0 sp.$spacing !important;
      color: map.get(map.get(clr.$colors, thm.$theme), fg-1) !important;

      .title {
        color: map.get(map.get(clr.$colors, thm.$theme), fg-1) !important;
      }

      &.-selected {
        background: map.get(map.get(clr.$colors, thm.$theme), note-bg-selected)  !important;
      }

      &:active {
      border: 3px solid map.get(map.get(clr.$colors, thm.$theme), note-border-color-active) !important;
      }
    }

    &:hover {
      background: transparent !important; // Remove default hover note background

      .content {
        background: map.get(map.get(clr.$colors, thm.$theme), note-bg-hover)  !important;

        &.-selected {
          background: map.get(map.get(clr.$colors, thm.$theme), note-bg-selected-hover) !important;
        }
      }
    }

    &::before {
      border: none !important; // Remove note separators
    }
  }
}

/* ==================
   EDITOR
   ================== */

div.note-editor-wrapper[role="main"] {
  background: map.get(map.get(clr.$colors, thm.$theme), window-bg-color) !important; 
  border-left: 1px solid map.get(map.get(clr.$colors, thm.$theme), secondary-sidebar-bg-color) !important;;

  // Set editor background for when no note is selected / notebook has no notes
  > div:first-of-type {
    background: map.get(map.get(clr.$colors, thm.$theme), window-bg-color) !important;
  }

  > div > div > div:nth-last-child(3) {
    padding-left: 0 !important;
  }
}

.note-title-wrapper {
  padding: sp.$spacing-xxs sp.$spacing-lg 0 sp.$spacing-lg !important;

  .title-input {
    background: map.get(map.get(clr.$colors, thm.$theme), window-bg-color) !important;
    color: map.get(map.get(clr.$colors, thm.$theme), fg-3) !important;
  }
}

.note-title-info-group {
  height: btn.$btn-size !important;

  > .updated-time-label {
    margin: 0 sp.$spacing-xs !important;
    color: map.get(map.get(clr.$colors, thm.$theme), fg-5) !important;
  }

  > .editor-toolbar {
    background: map.get(map.get(clr.$colors, thm.$theme), window-bg-color) !important;
    margin: 0 !important;
    padding: 0 sp.$spacing-xxs !important;
    height: btn.$btn-size-toolbar !important;

    button.toolbar-button {
      > span {
        font-size: fnt.$font-size !important;
      }

      &.-has-title {
        padding: 0 sp.$spacing-md !important;
      }

      &.disabled {
        span,
        i {
          color: map.get(map.get(clr.$colors, thm.$theme), icon-color) !important;
          opacity: 0.3 !important;
        }

        &:hover {
          background: transparent !important;
        }
      }

      &:not(.disabled):hover {
        background: btn.$btn-bg-0 !important;
      }

      &:hover {
        background: btn.$btn-bg-0 !important;
      }
    }
  }
}

// Notebook indicator on tag press
.sc-gEvEer.sc-dcJsrY.jiwcuV.dtFiFQ.sc-jXbUNg {
  margin: 0 sp.$spacing !important;
  background: map.get(map.get(clr.$colors, thm.$theme), charcoal-blue-1) !important;
  border-radius: btn.$btn-radius-sm !important;

  > span {
    color: map.get(map.get(clr.$colors, thm.$theme), blue-2) !important;
  }
}

.editor-toolbar {
  background: map.get(map.get(clr.$colors, thm.$theme), editor-bg-toolbar) !important;
  border-radius: btn.$btn-radius !important;
  height: sp.$toolbar-height !important;
  margin: sp.$spacing-xxs sp.$spacing-lg !important;

  button.toolbar-button {
    > span {
      font-size: 0.9em !important;
      line-height: 1 !important;
    }

    &.-has-title {
      padding: 0 3px !important;
    }

    &:not(.disabled):hover {
    background: btn.$btn-bg-3 !important;
    }
  }
}

// Hide the Toggle editors button
.editor-toolbar button[title="Toggle editors"] {
  display: none !important;
}

.CodeMirror {
  background: map.get(map.get(clr.$colors, thm.$theme), window-bg-color) !important;
}

.CodeMirror-scroll {
  background: map.get(map.get(clr.$colors, thm.$theme), window-bg-color) !important;
}

.CodeMirror-sizer {
  padding: 0 sp.$spacing-md !important; // Set padding for plain markdown
}

// Document colors

// Header
.cm-header {
  color: map.get(map.get(clr.$colors, thm.$theme), blue-1) !important;
}

// Italics/Emphasis, Bold, BoldItalics
.cm-em,
.cm-strong,
.cm-strong.cm-em {
  color: map.get(map.get(clr.$colors, thm.$theme), green-1) !important;
}

// Lists (Bullet/number/todo)
.cm-variable-2,
.cm-variable-3,
.cm-keyword {
  color: map.get(map.get(clr.$colors, thm.$theme), fg-4) !important;
}

// Links (link)
div.CodeMirror span.cm-url {
  color: map.get(map.get(clr.$colors, thm.$theme), blue-1) !important;
  opacity: 0.7 !important;
  text-decoration: underline !important;
}

// Links (text)
.cm-link-text {
  color: map.get(map.get(clr.$colors, thm.$theme), blue-1) !important;
}

pre.CodeMirror-line {
  color: map.get(map.get(clr.$colors, thm.$theme), fg-2) !important;
  background: none !important;
}
// Image links in the editor
span.cm-image {
  color: map.get(map.get(clr.$colors, thm.$theme), fg-5) !important;
}

// Horizontal line
.cm-hr {
  color: map.get(map.get(clr.$colors, thm.$theme), primary-sidebar-separator-color) !important;
}

.cm-variable-2.cm-strong {
  color: map.get(map.get(clr.$colors, thm.$theme), green-1) !important;
}

.cm-s-material-darker .cm-variable-2.cm-rm-list-token {
  color: map.get(map.get(clr.$colors, thm.$theme), purple-1) !important;
}

// Code blocks
.CodeMirror .cm-jn-code-block-background {
  background: map.get(map.get(clr.$colors, thm.$theme), view-bg-color) !important;
}

.cm-comment:not(.cm-jn-inline-code) {
  color: map.get(map.get(clr.$colors, thm.$theme), fg-5) !important;
  background: transparent !important;
}

// Apply colors to elements in code blocks
.cm-keyword,
.cm-atom {
  color: map.get(map.get(clr.$colors, thm.$theme), lavender-1) !important;
}

.cm-operator {
  color: map.get(map.get(clr.$colors, thm.$theme), red-1) !important;
}

.cm-number,
.cm-string {
  color: map.get(map.get(clr.$colors, thm.$theme), green-1) !important;
}

.cm-type {
  color: map.get(map.get(clr.$colors, thm.$theme), blue-1) !important;
}

.cm-variable {
  color: map.get(map.get(clr.$colors, thm.$theme), fg-4) !important;
}

.cm-def,
.cm-type {
  color: map.get(map.get(clr.$colors, thm.$theme), blue-1) !important;
}

.cm-meta {
  color: map.get(map.get(clr.$colors, thm.$theme), teal-1) !important;
}

.code-perfect-container pre.hljs ul.hljs-line-num li {
  color: map.get(map.get(clr.$colors, thm.$theme), fg-1) !important;
}

// Inline code
.cm-comment.cm-jn-inline-code {
  background: map.get(map.get(clr.$colors, thm.$theme), view-bg-color) !important;
  border: none !important;
  color: map.get(map.get(clr.$colors, thm.$theme), purple-1) !important;
  font-family: fnt.$font-family-monospace !important;
}

// Tag bar
.tag-bar {
  padding: sp.$spacing-xs sp.$spacing-md !important;

  button {
    @include mixBtn.buttonTag;
  }

  > .content {

    .tag-list {
      button {
        @include mixBtn.buttonTag;
      }
    }

    span {
      color: map.get(map.get(clr.$colors, thm.$theme), fg-4) !important;
    }
  }
}

// Adjust padding for editor and rendered markdown
.note-editor-viewer-row {
  padding: sp.$spacing 0 0 sp.$spacing-md !important;
}

/* ==================
   MODALS
   ================== */

.dialog-modal-layer {
  align-items: center !important;

  > .content {
    position: relative !important;
    display: flex !important;
    flex-direction: column !important;
    border-radius: brd.$window-radius !important;
    padding: 0 !important;
    min-width: 400px !important;

    #note-properties-dialog-title {
      @include mixModal.positionModalTitle;
      top: 20% !important;
    }

    .form {
      margin: sp.$spacing-lg !important;
    }

    > div[role="table"] {
      background: map.get(map.get(clr.$colors, thm.$theme), modal-bg-color) !important;
      border-bottom-left-radius: btn.$btn-radius-md !important;
      border-bottom-right-radius: btn.$btn-radius-md !important;
      padding: sp.$spacing-lg sp.$spacing-lg !important;
      overflow: hidden !important;

      .note-property-box {
        color: map.get(map.get(clr.$colors, thm.$theme), icon-color) !important;
        position: relative !important;
        flex-direction: column !important;
        justify-content: center;
        align-items: start !important;
        background: map.get(map.get(clr.$colors, thm.$theme), modal-row-bg-color) !important;
        padding: sp.$spacing-sm 25% calc(sp.$spacing-sm + 1px) sp.$spacing-lg !important;
        height: sp.$modal-row-height !important;
        margin-bottom: 0 !important;
        border: 3px solid map.get(map.get(clr.$colors, thm.$theme), modal-row-bg-color) !important;
        border-bottom: 1px solid map.get(map.get(clr.$colors, thm.$theme), modal-bg-color) !important;
        box-sizing: border-box !important;

        label[role="rowheader"] {
          font-weight: fnt.$font-weight !important;
          font-size: fnt.$font-size-sm !important;
          color: map.get(map.get(clr.$colors, thm.$theme), fg-5) !important;
        }

        span[role="cell"] {
          display: flex !important;
          width: 100% !important;
          justify-content: space-between !important;
          overflow: hidden !important;

          > div {
            color: map.get(map.get(clr.$colors, thm.$theme), fg-1) !important;
          }

          a {
            background: transparent !important;
          }

          a[style*="text-decoration: underline"] {
            color: map.get(map.get(clr.$colors, thm.$theme), blue-1) !important;
            text-decoration: underline !important;
          }

          a:not([style*="text-decoration: underline"]) {
            position: absolute !important;
            right: sp.$spacing-lg !important;
            top: 15% !important;

            &:hover {
              background: btn.$btn-bg-2 !important;
            }
          }

          .form-control {
            padding-inline: 0 !important;
            padding-block: 0 !important;
            height: 23px !important;
          }
        }

        input {
          color: map.get(map.get(clr.$colors, thm.$theme), fg-1) !important;
          background: map.get(map.get(clr.$colors, thm.$theme), modal-input-border-color-active) !important;
          border: none !important;
        }

        &:hover {
          background: map.get(map.get(clr.$colors, thm.$theme), modal-row-bg-color)-hover !important;
          border: 3px solid map.get(map.get(clr.$colors, thm.$theme), modal-row-bg-color)-hover !important;
          border-bottom: 1px solid map.get(map.get(clr.$colors, thm.$theme), modal-bg-color) !important;
        }

        &:focus-within {
          border: 3px solid map.get(map.get(clr.$colors, thm.$theme), blue-2) !important;
        }

        &:first-of-type {
          border-top-left-radius: btn.$btn-radius-md !important;
          border-top-right-radius: btn.$btn-radius-md !important;
        }

        &:last-of-type {
          border-bottom-left-radius: btn.$btn-radius-md !important;
          border-bottom-right-radius: btn.$btn-radius-md !important;
        }
      }
    }

    .item-list {
      background: transparent !important;

      > div {
        border-bottom: 0 !important;

        > div {
          color: map.get(map.get(clr.$colors, thm.$theme), fg-3) !important;
        }

        &.selected {
          background: map.get(map.get(clr.$colors, thm.$theme), bg-2) !important;
          border-radius: btn.$btn-radius !important;

          > div {
            color: map.get(map.get(clr.$colors, thm.$theme), fg-1) !important;
          }
        }
      }
    }

    // Tags modal headerbar selector
    > div[style*="text-align: right; margin-top: 10px;"] {
      @include mixModal.headerBar;

        button {
          @include mixBtn.buttonModalHeaderbar;
        }
    }

    // Tags modal background selector
     div[style*="display: inline-block; color: black; background-color: rgb(29, 32, 36);"] {
      background: map.get(map.get(clr.$colors, thm.$theme), modal-bg-color) !important;
      border-bottom-left-radius: brd.$window-radius !important;
      border-bottom-right-radius: brd.$window-radius !important;
     }

    // Note properties headerbar selector
    > div:nth-of-type(3):not(.dialog-root) {
      @include mixModal.headerBar;

        button {
          @include mixBtn.buttonModalHeaderbar;
        }
    }

    .dialog-root {
      position: relative !important;
      background: map.get(map.get(clr.$colors, thm.$theme), modal-bg-color) !important;
      border-radius: brd.$window-radius !important;
      min-width: unset !important;
      max-width: unset !important;
      width: inherit !important;
      display: flex !important;
      flex-direction: column !important;

      > h1 {
        @include mixModal.positionModalTitle;
        color: map.get(map.get(clr.$colors, thm.$theme), headerbar-fg-color) !important;
      }

      // New notebook headerbar selector
      > div:last-of-type {
        @include mixModal.headerBar;

        button {
          @include mixBtn.buttonModalHeaderbar;
        }
      }

      .dialog-content {
        background: transparent !important;
        padding: 0 !important;
        padding-bottom: 0 !important;

        .form-input-group {
          label {
            color: map.get(map.get(clr.$colors, thm.$theme), fg-2) !important;
          }

          > input {
            @include mixInput.modalInput;
          }

          button:not(
              .emoji-picker__emoji,
              .emoji-picker__category-buttons,
              .emoji-picker__category-button
            ) {
            @include mixBtn.buttonModal;
            padding: 0 btn.$btn-padding !important;
          }
        }

        .foldericon {
          background: transparent !important;
          border: 0 !important;
        }

        // Emoji picker
        .emoji-picker {
          background: map.get(map.get(clr.$colors, thm.$theme), modal-bg-color) !important;
          border-radius: brd.$window-radius !important;
          border: none !important;
          --emoji-size: 31px !important;
          --emoji-per-row: 7 !important;

          &__preview {
            display: none !important;
          }

          &__container {
            grid-auto-rows: calc(var(--emoji-size) * var(--emoji-size-multiplier) -  10px) !important;
            grid-template-columns: repeat(var(--emoji-per-row), calc(var(--emoji-size) * var(--emoji-size-multiplier) + 2.9px)) !important;
          }

          &__category {
            &-buttons {
              border-top: 1px solid btn.$btn-separator !important;
              height: sp.$spacing-xxl !important;
              margin: sp.$spacing-sm sp.$spacing-xs 0 !important;
            }

            &-name {
              color: map.get(map.get(clr.$colors, thm.$theme), fg-3) !important;
              font-weight: fnt.$font-weight-bold !important;
              margin: sp.$spacing-lm 0 sp.$spacing-md !important;
              text-transform: capitalize !important;
            }

            &-button {
              height: 100% !important;
              border: 0 !important;
              box-sizing: border-box !important;
              color: map.get(map.get(clr.$colors, thm.$theme), fg-1) !important;
              padding: 2px 0 0 !important;

              &-name {
                display: none !important;
              }
              
              &.active {
                color: map.get(map.get(clr.$colors, thm.$theme), blue-1) !important;
                border-bottom: 0 !important;
                border-top: 3px solid btn.$btn-bg-primary-0 !important;
                padding: 0 !important;
              }
            }
          }

          &__search-container {
            margin: sp.$spacing sp.$spacing sp.$spacing-md !important;
            .emoji-picker__search {
              @include mixInput.modalInput;
              padding: .5em 2.25em 0.5em 26px !important;

              &-icon {
                left: 0 !important;
                min-width: 28px !important;
                right: unset !important;
                text-align: center !important;
                top: calc(50% - 0.4em) !important;
              }
            }
          }

          &__content {
            height: unset !important;
            padding: sp.$spacing-xxs 0 0 !important;
          }

          &__emojis {
            margin: 0 0 0 sp.$spacing-md !important
          }

          &__emoji {
            @include mixBtn.buttonModal;
            border-radius: btn.$btn-radius-sm !important;
            width: 46px !important;

            &-area {
              display: flex !important;
              flex-direction: column-reverse !important;
            }
          }
        }
      }
    }

    > label {
      @include mixModal.positionModalTitle;
      color: map.get(map.get(clr.$colors, thm.$theme), headerbar-fg-color) !important;
      top: 19.4% !important;
    }
    
    .css-6tflte-control,.css-8s6j39-control {
      background: map.get(map.get(clr.$colors, thm.$theme), headerbar-bg-color) !important;
      border: 0 !important;
      border-radius: btn.$btn-radius-md !important;
      box-shadow: unset !important;
      margin: sp.$spacing-lg !important;

      .css-1vbpao6-multiValue {
        @include mixBtn.buttonTag;
        background: btn.$btn-bg-4 !important;
        height: btn.$btn-size-tag-modal !important;
        padding: 0 sp.$spacing-md !important;

        .css-17tafsy-MultiValueGeneric {
          line-height: 1.5 !important;
        }

        .css-13htnhl-MultiValueRemove:hover {
          color: map.get(map.get(clr.$colors, thm.$theme), red-1) !important;
        }

        &:hover {
          background: btn.$btn-bg-4 !important;
        }
      }
      
      &:hover {
        background: map.get(map.get(clr.$colors, thm.$theme), headerbar-bg-color) !important;
        border: 0 !important;
        border-radius: btn.$btn-radius-md !important;
        box-shadow: unset !important;
        margin: sp.$spacing-lg !important;
      }
    }

    div {
      button {
        color: map.get(map.get(clr.$colors, thm.$theme), fg-1) !important;
      }
    }

    // Layout editor text
    .vhhBH {
      background: map.get(map.get(clr.$colors, thm.$theme), view-bg-color) !important;
      border: 1px solid map.get(map.get(clr.$colors, thm.$theme), primary-sidebar-separator-color) !important;
      border-radius: brd.$border-radius !important;
      color: map.get(map.get(clr.$colors, thm.$theme), fg-1) !important;
    }
  }

  &::backdrop {
    background: clr.$modal-backdrop-color !important;
  }
}
